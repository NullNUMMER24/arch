#!/usr/bin/perl
#
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
#
# Licensed under the terms of the GNU GPL v3, or any later version.
#
# This script is meant to use with i3blocks. It parses the output of the "acpi"
# command (often provided by a package of the same name) to read the status of
# the battery, and eventually its remaining time (to full charge or discharge).
#
# The color will gradually change for a percentage below 85%, and the urgency
# (exit code 33) is set if there is less that 5% remaining.
#
# 180626 emak		adapted to take the available battery instead of the first one

use strict;
use warnings;
use utf8;

my $acpi;
my $status;
my $percent;
my $full_text;
my $short_text;

# read the first line of the "acpi" command output
open (ACPI, "acpi -b | grep 'Battery ' |") or die;
$acpi = <ACPI>;
close(ACPI);

# fail on unexpected output
if ($acpi !~ /: (\w+), (\d+)%/) {
	die "$acpi\n";
}

$status = $1;
$percent = $2;

$full_text = "";

if ($status eq 'Discharging') {
	$full_text .= '';
} elsif ($status eq 'Charging') {
	$full_text .= 'CHG ';
}

if ($percent < 5) {
  $full_text .="$percent% "
} elsif ($percent <20) {
  $full_text .="$percent% ";
} elsif ($percent < 50) {
  $full_text .="$percent% ";
} elsif ($percent < 80) {
  $full_text .="$percent% ";
} elsif ($percent = 100) {
  $full_text .="$percent% ";
}

if ($acpi =~ /(\d\d:\d\d):/) {
	$full_text .= " $1";
}

$short_text = $full_text;

# print text
print "$full_text\n";
print "$short_text\n";

if ($percent < 11) {
	print "#ffffff\n";
	print "#d1000e\n";
} elsif ($percent < 20) {
	print "#d1000e\n";
	print "#00000000\n";
} elsif ($percent = 100) {
	print "#ffffff\n";
	print "#00000000\n";
}

if ($percent < 5) {
	exit(33);
}

exit(0);
